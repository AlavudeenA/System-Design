• Be sure to capture both functional and non-functional requirements. Non-functional includes Considerations of Speed, Security, Reliability, Maintainability and even Cost.

• Scalability: a system is scalable if it is designed so that it can handle additional load and will still operate efficiently. 
	Ex: Load balancer, Cache and choice of database

• Reliability: a system is reliable if it can perform the function as expected.
	• It can tolerate user mistakes
	• Is good enough for the required use case
	• It also prevents unauthorized access or abuse.

• Availability: a system is available if it is able to perform its functionality (uptime/total-time). Note reliability and availability are related but not the same. Reliability implies availability but availability does not imply reliability. 
	Ex: Load balancer and additional databases

• Efficiency: a system is efficient if it is able to perform its functionality quickly. 
	• Latency, response time and bandwidth are all relevant metrics to measuring system efficiency. 
	• The introduction of the caching allows for greater efficiency for read requests by the user. 
	• The load-balancing also distributes the load more evenly across servers to make the system more efficient.

• Maintainability: a system is maintainable if it easy to make operate smoothly, simple for new engineers to understand, and easy to modify for unanticipated use cases. 
	Ex: Introducing APIs, Microservices
	
• Trade-offs : A component might be extremely efficient but not as reliable, or a certain design choice might be really effective at supporting one functionality like providing read access but not as efficient with write access. We should be prepared to make tradeoff decisions during the interview discussion.
